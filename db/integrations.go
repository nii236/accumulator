// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Integration is an object representing the database table.
type Integration struct {
	ID        null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Username  string     `boil:"username" json:"username" toml:"username" yaml:"username"`
	APIKey    string     `boil:"api_key" json:"api_key" toml:"api_key" yaml:"api_key"`
	AuthToken string     `boil:"auth_token" json:"auth_token" toml:"auth_token" yaml:"auth_token"`

	R *integrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L integrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IntegrationColumns = struct {
	ID        string
	Username  string
	APIKey    string
	AuthToken string
}{
	ID:        "id",
	Username:  "username",
	APIKey:    "api_key",
	AuthToken: "auth_token",
}

// Generated where

var IntegrationWhere = struct {
	ID        whereHelpernull_Int64
	Username  whereHelperstring
	APIKey    whereHelperstring
	AuthToken whereHelperstring
}{
	ID:        whereHelpernull_Int64{field: "\"integrations\".\"id\""},
	Username:  whereHelperstring{field: "\"integrations\".\"username\""},
	APIKey:    whereHelperstring{field: "\"integrations\".\"api_key\""},
	AuthToken: whereHelperstring{field: "\"integrations\".\"auth_token\""},
}

// IntegrationRels is where relationship names are stored.
var IntegrationRels = struct {
	Friend      string
	Attendances string
}{
	Friend:      "Friend",
	Attendances: "Attendances",
}

// integrationR is where relationships are stored.
type integrationR struct {
	Friend      *Friend
	Attendances AttendanceSlice
}

// NewStruct creates a new relationship struct
func (*integrationR) NewStruct() *integrationR {
	return &integrationR{}
}

// integrationL is where Load methods for each relationship are stored.
type integrationL struct{}

var (
	integrationAllColumns            = []string{"id", "username", "api_key", "auth_token"}
	integrationColumnsWithoutDefault = []string{"username", "api_key", "auth_token"}
	integrationColumnsWithDefault    = []string{"id"}
	integrationPrimaryKeyColumns     = []string{"id"}
)

type (
	// IntegrationSlice is an alias for a slice of pointers to Integration.
	// This should generally be used opposed to []Integration.
	IntegrationSlice []*Integration
	// IntegrationHook is the signature for custom Integration hook methods
	IntegrationHook func(boil.Executor, *Integration) error

	integrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	integrationType                 = reflect.TypeOf(&Integration{})
	integrationMapping              = queries.MakeStructMapping(integrationType)
	integrationPrimaryKeyMapping, _ = queries.BindMapping(integrationType, integrationMapping, integrationPrimaryKeyColumns)
	integrationInsertCacheMut       sync.RWMutex
	integrationInsertCache          = make(map[string]insertCache)
	integrationUpdateCacheMut       sync.RWMutex
	integrationUpdateCache          = make(map[string]updateCache)
	integrationUpsertCacheMut       sync.RWMutex
	integrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var integrationBeforeInsertHooks []IntegrationHook
var integrationBeforeUpdateHooks []IntegrationHook
var integrationBeforeDeleteHooks []IntegrationHook
var integrationBeforeUpsertHooks []IntegrationHook

var integrationAfterInsertHooks []IntegrationHook
var integrationAfterSelectHooks []IntegrationHook
var integrationAfterUpdateHooks []IntegrationHook
var integrationAfterDeleteHooks []IntegrationHook
var integrationAfterUpsertHooks []IntegrationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Integration) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Integration) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Integration) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Integration) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Integration) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Integration) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Integration) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Integration) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Integration) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range integrationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIntegrationHook registers your hook function for all future operations.
func AddIntegrationHook(hookPoint boil.HookPoint, integrationHook IntegrationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		integrationBeforeInsertHooks = append(integrationBeforeInsertHooks, integrationHook)
	case boil.BeforeUpdateHook:
		integrationBeforeUpdateHooks = append(integrationBeforeUpdateHooks, integrationHook)
	case boil.BeforeDeleteHook:
		integrationBeforeDeleteHooks = append(integrationBeforeDeleteHooks, integrationHook)
	case boil.BeforeUpsertHook:
		integrationBeforeUpsertHooks = append(integrationBeforeUpsertHooks, integrationHook)
	case boil.AfterInsertHook:
		integrationAfterInsertHooks = append(integrationAfterInsertHooks, integrationHook)
	case boil.AfterSelectHook:
		integrationAfterSelectHooks = append(integrationAfterSelectHooks, integrationHook)
	case boil.AfterUpdateHook:
		integrationAfterUpdateHooks = append(integrationAfterUpdateHooks, integrationHook)
	case boil.AfterDeleteHook:
		integrationAfterDeleteHooks = append(integrationAfterDeleteHooks, integrationHook)
	case boil.AfterUpsertHook:
		integrationAfterUpsertHooks = append(integrationAfterUpsertHooks, integrationHook)
	}
}

// OneG returns a single integration record from the query using the global executor.
func (q integrationQuery) OneG() (*Integration, error) {
	return q.One(boil.GetDB())
}

// One returns a single integration record from the query.
func (q integrationQuery) One(exec boil.Executor) (*Integration, error) {
	o := &Integration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for integrations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Integration records from the query using the global executor.
func (q integrationQuery) AllG() (IntegrationSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Integration records from the query.
func (q integrationQuery) All(exec boil.Executor) (IntegrationSlice, error) {
	var o []*Integration

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Integration slice")
	}

	if len(integrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Integration records in the query, and panics on error.
func (q integrationQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Integration records in the query.
func (q integrationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count integrations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q integrationQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q integrationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if integrations exists")
	}

	return count > 0, nil
}

// Friend pointed to by the foreign key.
func (o *Integration) Friend(mods ...qm.QueryMod) friendQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"integration_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Friends(queryMods...)
	queries.SetFrom(query.Query, "\"friends\"")

	return query
}

// Attendances retrieves all the attendance's Attendances with an executor.
func (o *Integration) Attendances(mods ...qm.QueryMod) attendanceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attendance\".\"integration_id\"=?", o.ID),
	)

	query := Attendances(queryMods...)
	queries.SetFrom(query.Query, "\"attendance\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"attendance\".*"})
	}

	return query
}

// LoadFriend allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (integrationL) LoadFriend(e boil.Executor, singular bool, maybeIntegration interface{}, mods queries.Applicator) error {
	var slice []*Integration
	var object *Integration

	if singular {
		object = maybeIntegration.(*Integration)
	} else {
		slice = *maybeIntegration.(*[]*Integration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &integrationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &integrationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`friends`), qm.WhereIn(`friends.integration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Friend")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Friend")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for friends")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friends")
	}

	if len(integrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Friend = foreign
		if foreign.R == nil {
			foreign.R = &friendR{}
		}
		foreign.R.Integration = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.IntegrationID) {
				local.R.Friend = foreign
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.Integration = local
				break
			}
		}
	}

	return nil
}

// LoadAttendances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (integrationL) LoadAttendances(e boil.Executor, singular bool, maybeIntegration interface{}, mods queries.Applicator) error {
	var slice []*Integration
	var object *Integration

	if singular {
		object = maybeIntegration.(*Integration)
	} else {
		slice = *maybeIntegration.(*[]*Integration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &integrationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &integrationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`attendance`), qm.WhereIn(`attendance.integration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attendance")
	}

	var resultSlice []*Attendance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attendance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attendance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attendance")
	}

	if len(attendanceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Attendances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attendanceR{}
			}
			foreign.R.Integration = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IntegrationID) {
				local.R.Attendances = append(local.R.Attendances, foreign)
				if foreign.R == nil {
					foreign.R = &attendanceR{}
				}
				foreign.R.Integration = local
				break
			}
		}
	}

	return nil
}

// SetFriendG of the integration to the related item.
// Sets o.R.Friend to related.
// Adds o to related.R.Integration.
// Uses the global database handle.
func (o *Integration) SetFriendG(insert bool, related *Friend) error {
	return o.SetFriend(boil.GetDB(), insert, related)
}

// SetFriend of the integration to the related item.
// Sets o.R.Friend to related.
// Adds o to related.R.Integration.
func (o *Integration) SetFriend(exec boil.Executor, insert bool, related *Friend) error {
	var err error

	if insert {
		queries.Assign(&related.IntegrationID, o.ID)

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"friends\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"integration_id"}),
			strmangle.WhereClause("\"", "\"", 0, friendPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.IntegrationID, o.ID)
	}

	if o.R == nil {
		o.R = &integrationR{
			Friend: related,
		}
	} else {
		o.R.Friend = related
	}

	if related.R == nil {
		related.R = &friendR{
			Integration: o,
		}
	} else {
		related.R.Integration = o
	}
	return nil
}

// AddAttendancesG adds the given related objects to the existing relationships
// of the integration, optionally inserting them as new records.
// Appends related to o.R.Attendances.
// Sets related.R.Integration appropriately.
// Uses the global database handle.
func (o *Integration) AddAttendancesG(insert bool, related ...*Attendance) error {
	return o.AddAttendances(boil.GetDB(), insert, related...)
}

// AddAttendances adds the given related objects to the existing relationships
// of the integration, optionally inserting them as new records.
// Appends related to o.R.Attendances.
// Sets related.R.Integration appropriately.
func (o *Integration) AddAttendances(exec boil.Executor, insert bool, related ...*Attendance) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IntegrationID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attendance\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"integration_id"}),
				strmangle.WhereClause("\"", "\"", 0, attendancePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Timestamp, rel.FriendID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IntegrationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &integrationR{
			Attendances: related,
		}
	} else {
		o.R.Attendances = append(o.R.Attendances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attendanceR{
				Integration: o,
			}
		} else {
			rel.R.Integration = o
		}
	}
	return nil
}

// SetAttendancesG removes all previously related items of the
// integration replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Integration's Attendances accordingly.
// Replaces o.R.Attendances with related.
// Sets related.R.Integration's Attendances accordingly.
// Uses the global database handle.
func (o *Integration) SetAttendancesG(insert bool, related ...*Attendance) error {
	return o.SetAttendances(boil.GetDB(), insert, related...)
}

// SetAttendances removes all previously related items of the
// integration replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Integration's Attendances accordingly.
// Replaces o.R.Attendances with related.
// Sets related.R.Integration's Attendances accordingly.
func (o *Integration) SetAttendances(exec boil.Executor, insert bool, related ...*Attendance) error {
	query := "update \"attendance\" set \"integration_id\" = null where \"integration_id\" = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Attendances {
			queries.SetScanner(&rel.IntegrationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Integration = nil
		}

		o.R.Attendances = nil
	}
	return o.AddAttendances(exec, insert, related...)
}

// RemoveAttendancesG relationships from objects passed in.
// Removes related items from R.Attendances (uses pointer comparison, removal does not keep order)
// Sets related.R.Integration.
// Uses the global database handle.
func (o *Integration) RemoveAttendancesG(related ...*Attendance) error {
	return o.RemoveAttendances(boil.GetDB(), related...)
}

// RemoveAttendances relationships from objects passed in.
// Removes related items from R.Attendances (uses pointer comparison, removal does not keep order)
// Sets related.R.Integration.
func (o *Integration) RemoveAttendances(exec boil.Executor, related ...*Attendance) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IntegrationID, nil)
		if rel.R != nil {
			rel.R.Integration = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("integration_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Attendances {
			if rel != ri {
				continue
			}

			ln := len(o.R.Attendances)
			if ln > 1 && i < ln-1 {
				o.R.Attendances[i] = o.R.Attendances[ln-1]
			}
			o.R.Attendances = o.R.Attendances[:ln-1]
			break
		}
	}

	return nil
}

// Integrations retrieves all the records using an executor.
func Integrations(mods ...qm.QueryMod) integrationQuery {
	mods = append(mods, qm.From("\"integrations\""))
	return integrationQuery{NewQuery(mods...)}
}

// FindIntegrationG retrieves a single record by ID.
func FindIntegrationG(iD null.Int64, selectCols ...string) (*Integration, error) {
	return FindIntegration(boil.GetDB(), iD, selectCols...)
}

// FindIntegration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIntegration(exec boil.Executor, iD null.Int64, selectCols ...string) (*Integration, error) {
	integrationObj := &Integration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"integrations\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, integrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from integrations")
	}

	return integrationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Integration) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Integration) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no integrations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(integrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	integrationInsertCacheMut.RLock()
	cache, cached := integrationInsertCache[key]
	integrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			integrationAllColumns,
			integrationColumnsWithDefault,
			integrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(integrationType, integrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(integrationType, integrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"integrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"integrations\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"integrations\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, integrationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into integrations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for integrations")
	}

CacheNoHooks:
	if !cached {
		integrationInsertCacheMut.Lock()
		integrationInsertCache[key] = cache
		integrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Integration record using the global executor.
// See Update for more documentation.
func (o *Integration) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Integration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Integration) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	integrationUpdateCacheMut.RLock()
	cache, cached := integrationUpdateCache[key]
	integrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			integrationAllColumns,
			integrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update integrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"integrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, integrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(integrationType, integrationMapping, append(wl, integrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update integrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for integrations")
	}

	if !cached {
		integrationUpdateCacheMut.Lock()
		integrationUpdateCache[key] = cache
		integrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q integrationQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q integrationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for integrations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IntegrationSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IntegrationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), integrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, integrationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in integration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all integration")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Integration record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Integration) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Integration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Integration) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Integration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), integrationPrimaryKeyMapping)
	sql := "DELETE FROM \"integrations\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for integrations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q integrationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no integrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for integrations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IntegrationSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IntegrationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(integrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), integrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, integrationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from integration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for integrations")
	}

	if len(integrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Integration) ReloadG() error {
	if o == nil {
		return errors.New("db: no Integration provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Integration) Reload(exec boil.Executor) error {
	ret, err := FindIntegration(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IntegrationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty IntegrationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IntegrationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IntegrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), integrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"integrations\".* FROM \"integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, integrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in IntegrationSlice")
	}

	*o = slice

	return nil
}

// IntegrationExistsG checks if the Integration row exists.
func IntegrationExistsG(iD null.Int64) (bool, error) {
	return IntegrationExists(boil.GetDB(), iD)
}

// IntegrationExists checks if the Integration row exists.
func IntegrationExists(exec boil.Executor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"integrations\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if integrations exists")
	}

	return exists, nil
}

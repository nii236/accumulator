// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Attendance is an object representing the database table.
type Attendance struct {
	Timestamp  int64      `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	FriendID   null.Int64 `boil:"friend_id" json:"friend_id,omitempty" toml:"friend_id" yaml:"friend_id,omitempty"`
	TeacherID  null.Int64 `boil:"teacher_id" json:"teacher_id,omitempty" toml:"teacher_id" yaml:"teacher_id,omitempty"`
	WorldID    string     `boil:"world_id" json:"world_id" toml:"world_id" yaml:"world_id"`
	InstanceID string     `boil:"instance_id" json:"instance_id" toml:"instance_id" yaml:"instance_id"`

	R *attendanceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attendanceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttendanceColumns = struct {
	Timestamp  string
	FriendID   string
	TeacherID  string
	WorldID    string
	InstanceID string
}{
	Timestamp:  "timestamp",
	FriendID:   "friend_id",
	TeacherID:  "teacher_id",
	WorldID:    "world_id",
	InstanceID: "instance_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var AttendanceWhere = struct {
	Timestamp  whereHelperint64
	FriendID   whereHelpernull_Int64
	TeacherID  whereHelpernull_Int64
	WorldID    whereHelperstring
	InstanceID whereHelperstring
}{
	Timestamp:  whereHelperint64{field: "\"attendance\".\"timestamp\""},
	FriendID:   whereHelpernull_Int64{field: "\"attendance\".\"friend_id\""},
	TeacherID:  whereHelpernull_Int64{field: "\"attendance\".\"teacher_id\""},
	WorldID:    whereHelperstring{field: "\"attendance\".\"world_id\""},
	InstanceID: whereHelperstring{field: "\"attendance\".\"instance_id\""},
}

// AttendanceRels is where relationship names are stored.
var AttendanceRels = struct {
	Teacher string
	Friend  string
}{
	Teacher: "Teacher",
	Friend:  "Friend",
}

// attendanceR is where relationships are stored.
type attendanceR struct {
	Teacher *Friend
	Friend  *Friend
}

// NewStruct creates a new relationship struct
func (*attendanceR) NewStruct() *attendanceR {
	return &attendanceR{}
}

// attendanceL is where Load methods for each relationship are stored.
type attendanceL struct{}

var (
	attendanceAllColumns            = []string{"timestamp", "friend_id", "teacher_id", "world_id", "instance_id"}
	attendanceColumnsWithoutDefault = []string{"timestamp", "friend_id", "teacher_id", "world_id", "instance_id"}
	attendanceColumnsWithDefault    = []string{}
	attendancePrimaryKeyColumns     = []string{"timestamp", "friend_id"}
)

type (
	// AttendanceSlice is an alias for a slice of pointers to Attendance.
	// This should generally be used opposed to []Attendance.
	AttendanceSlice []*Attendance
	// AttendanceHook is the signature for custom Attendance hook methods
	AttendanceHook func(boil.Executor, *Attendance) error

	attendanceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attendanceType                 = reflect.TypeOf(&Attendance{})
	attendanceMapping              = queries.MakeStructMapping(attendanceType)
	attendancePrimaryKeyMapping, _ = queries.BindMapping(attendanceType, attendanceMapping, attendancePrimaryKeyColumns)
	attendanceInsertCacheMut       sync.RWMutex
	attendanceInsertCache          = make(map[string]insertCache)
	attendanceUpdateCacheMut       sync.RWMutex
	attendanceUpdateCache          = make(map[string]updateCache)
	attendanceUpsertCacheMut       sync.RWMutex
	attendanceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attendanceBeforeInsertHooks []AttendanceHook
var attendanceBeforeUpdateHooks []AttendanceHook
var attendanceBeforeDeleteHooks []AttendanceHook
var attendanceBeforeUpsertHooks []AttendanceHook

var attendanceAfterInsertHooks []AttendanceHook
var attendanceAfterSelectHooks []AttendanceHook
var attendanceAfterUpdateHooks []AttendanceHook
var attendanceAfterDeleteHooks []AttendanceHook
var attendanceAfterUpsertHooks []AttendanceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Attendance) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Attendance) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Attendance) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Attendance) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Attendance) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Attendance) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Attendance) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Attendance) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Attendance) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attendanceAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttendanceHook registers your hook function for all future operations.
func AddAttendanceHook(hookPoint boil.HookPoint, attendanceHook AttendanceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		attendanceBeforeInsertHooks = append(attendanceBeforeInsertHooks, attendanceHook)
	case boil.BeforeUpdateHook:
		attendanceBeforeUpdateHooks = append(attendanceBeforeUpdateHooks, attendanceHook)
	case boil.BeforeDeleteHook:
		attendanceBeforeDeleteHooks = append(attendanceBeforeDeleteHooks, attendanceHook)
	case boil.BeforeUpsertHook:
		attendanceBeforeUpsertHooks = append(attendanceBeforeUpsertHooks, attendanceHook)
	case boil.AfterInsertHook:
		attendanceAfterInsertHooks = append(attendanceAfterInsertHooks, attendanceHook)
	case boil.AfterSelectHook:
		attendanceAfterSelectHooks = append(attendanceAfterSelectHooks, attendanceHook)
	case boil.AfterUpdateHook:
		attendanceAfterUpdateHooks = append(attendanceAfterUpdateHooks, attendanceHook)
	case boil.AfterDeleteHook:
		attendanceAfterDeleteHooks = append(attendanceAfterDeleteHooks, attendanceHook)
	case boil.AfterUpsertHook:
		attendanceAfterUpsertHooks = append(attendanceAfterUpsertHooks, attendanceHook)
	}
}

// OneG returns a single attendance record from the query using the global executor.
func (q attendanceQuery) OneG() (*Attendance, error) {
	return q.One(boil.GetDB())
}

// One returns a single attendance record from the query.
func (q attendanceQuery) One(exec boil.Executor) (*Attendance, error) {
	o := &Attendance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for attendance")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Attendance records from the query using the global executor.
func (q attendanceQuery) AllG() (AttendanceSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Attendance records from the query.
func (q attendanceQuery) All(exec boil.Executor) (AttendanceSlice, error) {
	var o []*Attendance

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Attendance slice")
	}

	if len(attendanceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Attendance records in the query, and panics on error.
func (q attendanceQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Attendance records in the query.
func (q attendanceQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count attendance rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q attendanceQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q attendanceQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if attendance exists")
	}

	return count > 0, nil
}

// Teacher pointed to by the foreign key.
func (o *Attendance) Teacher(mods ...qm.QueryMod) friendQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeacherID),
	}

	queryMods = append(queryMods, mods...)

	query := Friends(queryMods...)
	queries.SetFrom(query.Query, "\"friends\"")

	return query
}

// Friend pointed to by the foreign key.
func (o *Attendance) Friend(mods ...qm.QueryMod) friendQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FriendID),
	}

	queryMods = append(queryMods, mods...)

	query := Friends(queryMods...)
	queries.SetFrom(query.Query, "\"friends\"")

	return query
}

// LoadTeacher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attendanceL) LoadTeacher(e boil.Executor, singular bool, maybeAttendance interface{}, mods queries.Applicator) error {
	var slice []*Attendance
	var object *Attendance

	if singular {
		object = maybeAttendance.(*Attendance)
	} else {
		slice = *maybeAttendance.(*[]*Attendance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attendanceR{}
		}
		if !queries.IsNil(object.TeacherID) {
			args = append(args, object.TeacherID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attendanceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeacherID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeacherID) {
				args = append(args, obj.TeacherID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`friends`), qm.WhereIn(`friends.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Friend")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Friend")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for friends")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friends")
	}

	if len(attendanceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Teacher = foreign
		if foreign.R == nil {
			foreign.R = &friendR{}
		}
		foreign.R.TeacherAttendances = append(foreign.R.TeacherAttendances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeacherID, foreign.ID) {
				local.R.Teacher = foreign
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.TeacherAttendances = append(foreign.R.TeacherAttendances, local)
				break
			}
		}
	}

	return nil
}

// LoadFriend allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attendanceL) LoadFriend(e boil.Executor, singular bool, maybeAttendance interface{}, mods queries.Applicator) error {
	var slice []*Attendance
	var object *Attendance

	if singular {
		object = maybeAttendance.(*Attendance)
	} else {
		slice = *maybeAttendance.(*[]*Attendance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attendanceR{}
		}
		if !queries.IsNil(object.FriendID) {
			args = append(args, object.FriendID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attendanceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FriendID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FriendID) {
				args = append(args, obj.FriendID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`friends`), qm.WhereIn(`friends.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Friend")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Friend")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for friends")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friends")
	}

	if len(attendanceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Friend = foreign
		if foreign.R == nil {
			foreign.R = &friendR{}
		}
		foreign.R.Attendance = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FriendID, foreign.ID) {
				local.R.Friend = foreign
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.Attendance = local
				break
			}
		}
	}

	return nil
}

// SetTeacherG of the attendance to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.TeacherAttendances.
// Uses the global database handle.
func (o *Attendance) SetTeacherG(insert bool, related *Friend) error {
	return o.SetTeacher(boil.GetDB(), insert, related)
}

// SetTeacher of the attendance to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.TeacherAttendances.
func (o *Attendance) SetTeacher(exec boil.Executor, insert bool, related *Friend) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attendance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"teacher_id"}),
		strmangle.WhereClause("\"", "\"", 0, attendancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Timestamp, o.FriendID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeacherID, related.ID)
	if o.R == nil {
		o.R = &attendanceR{
			Teacher: related,
		}
	} else {
		o.R.Teacher = related
	}

	if related.R == nil {
		related.R = &friendR{
			TeacherAttendances: AttendanceSlice{o},
		}
	} else {
		related.R.TeacherAttendances = append(related.R.TeacherAttendances, o)
	}

	return nil
}

// RemoveTeacherG relationship.
// Sets o.R.Teacher to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Attendance) RemoveTeacherG(related *Friend) error {
	return o.RemoveTeacher(boil.GetDB(), related)
}

// RemoveTeacher relationship.
// Sets o.R.Teacher to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Attendance) RemoveTeacher(exec boil.Executor, related *Friend) error {
	var err error

	queries.SetScanner(&o.TeacherID, nil)
	if _, err = o.Update(exec, boil.Whitelist("teacher_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Teacher = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TeacherAttendances {
		if queries.Equal(o.TeacherID, ri.TeacherID) {
			continue
		}

		ln := len(related.R.TeacherAttendances)
		if ln > 1 && i < ln-1 {
			related.R.TeacherAttendances[i] = related.R.TeacherAttendances[ln-1]
		}
		related.R.TeacherAttendances = related.R.TeacherAttendances[:ln-1]
		break
	}
	return nil
}

// SetFriendG of the attendance to the related item.
// Sets o.R.Friend to related.
// Adds o to related.R.Attendance.
// Uses the global database handle.
func (o *Attendance) SetFriendG(insert bool, related *Friend) error {
	return o.SetFriend(boil.GetDB(), insert, related)
}

// SetFriend of the attendance to the related item.
// Sets o.R.Friend to related.
// Adds o to related.R.Attendance.
func (o *Attendance) SetFriend(exec boil.Executor, insert bool, related *Friend) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attendance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"friend_id"}),
		strmangle.WhereClause("\"", "\"", 0, attendancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Timestamp, o.FriendID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FriendID, related.ID)
	if o.R == nil {
		o.R = &attendanceR{
			Friend: related,
		}
	} else {
		o.R.Friend = related
	}

	if related.R == nil {
		related.R = &friendR{
			Attendance: o,
		}
	} else {
		related.R.Attendance = o
	}

	return nil
}

// RemoveFriendG relationship.
// Sets o.R.Friend to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Attendance) RemoveFriendG(related *Friend) error {
	return o.RemoveFriend(boil.GetDB(), related)
}

// RemoveFriend relationship.
// Sets o.R.Friend to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Attendance) RemoveFriend(exec boil.Executor, related *Friend) error {
	var err error

	queries.SetScanner(&o.FriendID, nil)
	if _, err = o.Update(exec, boil.Whitelist("friend_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Friend = nil
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Attendance = nil
	return nil
}

// Attendances retrieves all the records using an executor.
func Attendances(mods ...qm.QueryMod) attendanceQuery {
	mods = append(mods, qm.From("\"attendance\""))
	return attendanceQuery{NewQuery(mods...)}
}

// FindAttendanceG retrieves a single record by ID.
func FindAttendanceG(timestamp int64, friendID null.Int64, selectCols ...string) (*Attendance, error) {
	return FindAttendance(boil.GetDB(), timestamp, friendID, selectCols...)
}

// FindAttendance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttendance(exec boil.Executor, timestamp int64, friendID null.Int64, selectCols ...string) (*Attendance, error) {
	attendanceObj := &Attendance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attendance\" where \"timestamp\"=? AND \"friend_id\"=?", sel,
	)

	q := queries.Raw(query, timestamp, friendID)

	err := q.Bind(nil, exec, attendanceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from attendance")
	}

	return attendanceObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Attendance) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Attendance) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no attendance provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attendanceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attendanceInsertCacheMut.RLock()
	cache, cached := attendanceInsertCache[key]
	attendanceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attendanceAllColumns,
			attendanceColumnsWithDefault,
			attendanceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attendanceType, attendanceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attendanceType, attendanceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attendance\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attendance\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"attendance\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, attendancePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into attendance")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Timestamp,
		o.FriendID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for attendance")
	}

CacheNoHooks:
	if !cached {
		attendanceInsertCacheMut.Lock()
		attendanceInsertCache[key] = cache
		attendanceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Attendance record using the global executor.
// See Update for more documentation.
func (o *Attendance) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Attendance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Attendance) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attendanceUpdateCacheMut.RLock()
	cache, cached := attendanceUpdateCache[key]
	attendanceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attendanceAllColumns,
			attendancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update attendance, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attendance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, attendancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attendanceType, attendanceMapping, append(wl, attendancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update attendance row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for attendance")
	}

	if !cached {
		attendanceUpdateCacheMut.Lock()
		attendanceUpdateCache[key] = cache
		attendanceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q attendanceQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q attendanceQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for attendance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for attendance")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AttendanceSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttendanceSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attendancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attendance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, attendancePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in attendance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all attendance")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Attendance record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Attendance) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Attendance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Attendance) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Attendance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attendancePrimaryKeyMapping)
	sql := "DELETE FROM \"attendance\" WHERE \"timestamp\"=? AND \"friend_id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from attendance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for attendance")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attendanceQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no attendanceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from attendance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for attendance")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AttendanceSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttendanceSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attendanceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attendancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attendance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, attendancePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from attendance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for attendance")
	}

	if len(attendanceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Attendance) ReloadG() error {
	if o == nil {
		return errors.New("db: no Attendance provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Attendance) Reload(exec boil.Executor) error {
	ret, err := FindAttendance(exec, o.Timestamp, o.FriendID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttendanceSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty AttendanceSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttendanceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttendanceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attendancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attendance\".* FROM \"attendance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, attendancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in AttendanceSlice")
	}

	*o = slice

	return nil
}

// AttendanceExistsG checks if the Attendance row exists.
func AttendanceExistsG(timestamp int64, friendID null.Int64) (bool, error) {
	return AttendanceExists(boil.GetDB(), timestamp, friendID)
}

// AttendanceExists checks if the Attendance row exists.
func AttendanceExists(exec boil.Executor, timestamp int64, friendID null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attendance\" where \"timestamp\"=? AND \"friend_id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, timestamp, friendID)
	}

	row := exec.QueryRow(sql, timestamp, friendID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if attendance exists")
	}

	return exists, nil
}

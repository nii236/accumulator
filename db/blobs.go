// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Blob is an object representing the database table.
type Blob struct {
	ID            null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	FileName      string     `boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`
	MimeType      string     `boil:"mime_type" json:"mime_type" toml:"mime_type" yaml:"mime_type"`
	FileSizeBytes int64      `boil:"file_size_bytes" json:"file_size_bytes" toml:"file_size_bytes" yaml:"file_size_bytes"`
	EXTENSION     string     `boil:"EXTENSION" json:"EXTENSION" toml:"EXTENSION" yaml:"EXTENSION"`
	File          []byte     `boil:"file" json:"file" toml:"file" yaml:"file"`
	Views         null.Int64 `boil:"views" json:"views,omitempty" toml:"views" yaml:"views,omitempty"`
	Archived      bool       `boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt    null.Time  `boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	UpdatedAt     time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlobColumns = struct {
	ID            string
	FileName      string
	MimeType      string
	FileSizeBytes string
	EXTENSION     string
	File          string
	Views         string
	Archived      string
	ArchivedAt    string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	FileName:      "file_name",
	MimeType:      "mime_type",
	FileSizeBytes: "file_size_bytes",
	EXTENSION:     "EXTENSION",
	File:          "file",
	Views:         "views",
	Archived:      "archived",
	ArchivedAt:    "archived_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var BlobWhere = struct {
	ID            whereHelpernull_Int64
	FileName      whereHelperstring
	MimeType      whereHelperstring
	FileSizeBytes whereHelperint64
	EXTENSION     whereHelperstring
	File          whereHelper__byte
	Views         whereHelpernull_Int64
	Archived      whereHelperbool
	ArchivedAt    whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelpernull_Int64{field: "\"blobs\".\"id\""},
	FileName:      whereHelperstring{field: "\"blobs\".\"file_name\""},
	MimeType:      whereHelperstring{field: "\"blobs\".\"mime_type\""},
	FileSizeBytes: whereHelperint64{field: "\"blobs\".\"file_size_bytes\""},
	EXTENSION:     whereHelperstring{field: "\"blobs\".\"EXTENSION\""},
	File:          whereHelper__byte{field: "\"blobs\".\"file\""},
	Views:         whereHelpernull_Int64{field: "\"blobs\".\"views\""},
	Archived:      whereHelperbool{field: "\"blobs\".\"archived\""},
	ArchivedAt:    whereHelpernull_Time{field: "\"blobs\".\"archived_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"blobs\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"blobs\".\"created_at\""},
}

// BlobRels is where relationship names are stored.
var BlobRels = struct {
	AvatarBlobFriends string
}{
	AvatarBlobFriends: "AvatarBlobFriends",
}

// blobR is where relationships are stored.
type blobR struct {
	AvatarBlobFriends FriendSlice
}

// NewStruct creates a new relationship struct
func (*blobR) NewStruct() *blobR {
	return &blobR{}
}

// blobL is where Load methods for each relationship are stored.
type blobL struct{}

var (
	blobAllColumns            = []string{"id", "file_name", "mime_type", "file_size_bytes", "EXTENSION", "file", "views", "archived", "archived_at", "updated_at", "created_at"}
	blobColumnsWithoutDefault = []string{"file_name", "mime_type", "file_size_bytes", "EXTENSION", "file", "archived_at"}
	blobColumnsWithDefault    = []string{"id", "views", "archived", "updated_at", "created_at"}
	blobPrimaryKeyColumns     = []string{"id"}
)

type (
	// BlobSlice is an alias for a slice of pointers to Blob.
	// This should generally be used opposed to []Blob.
	BlobSlice []*Blob
	// BlobHook is the signature for custom Blob hook methods
	BlobHook func(boil.Executor, *Blob) error

	blobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blobType                 = reflect.TypeOf(&Blob{})
	blobMapping              = queries.MakeStructMapping(blobType)
	blobPrimaryKeyMapping, _ = queries.BindMapping(blobType, blobMapping, blobPrimaryKeyColumns)
	blobInsertCacheMut       sync.RWMutex
	blobInsertCache          = make(map[string]insertCache)
	blobUpdateCacheMut       sync.RWMutex
	blobUpdateCache          = make(map[string]updateCache)
	blobUpsertCacheMut       sync.RWMutex
	blobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blobBeforeInsertHooks []BlobHook
var blobBeforeUpdateHooks []BlobHook
var blobBeforeDeleteHooks []BlobHook
var blobBeforeUpsertHooks []BlobHook

var blobAfterInsertHooks []BlobHook
var blobAfterSelectHooks []BlobHook
var blobAfterUpdateHooks []BlobHook
var blobAfterDeleteHooks []BlobHook
var blobAfterUpsertHooks []BlobHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Blob) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Blob) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Blob) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Blob) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Blob) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Blob) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Blob) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Blob) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Blob) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blobAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlobHook registers your hook function for all future operations.
func AddBlobHook(hookPoint boil.HookPoint, blobHook BlobHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		blobBeforeInsertHooks = append(blobBeforeInsertHooks, blobHook)
	case boil.BeforeUpdateHook:
		blobBeforeUpdateHooks = append(blobBeforeUpdateHooks, blobHook)
	case boil.BeforeDeleteHook:
		blobBeforeDeleteHooks = append(blobBeforeDeleteHooks, blobHook)
	case boil.BeforeUpsertHook:
		blobBeforeUpsertHooks = append(blobBeforeUpsertHooks, blobHook)
	case boil.AfterInsertHook:
		blobAfterInsertHooks = append(blobAfterInsertHooks, blobHook)
	case boil.AfterSelectHook:
		blobAfterSelectHooks = append(blobAfterSelectHooks, blobHook)
	case boil.AfterUpdateHook:
		blobAfterUpdateHooks = append(blobAfterUpdateHooks, blobHook)
	case boil.AfterDeleteHook:
		blobAfterDeleteHooks = append(blobAfterDeleteHooks, blobHook)
	case boil.AfterUpsertHook:
		blobAfterUpsertHooks = append(blobAfterUpsertHooks, blobHook)
	}
}

// OneG returns a single blob record from the query using the global executor.
func (q blobQuery) OneG() (*Blob, error) {
	return q.One(boil.GetDB())
}

// One returns a single blob record from the query.
func (q blobQuery) One(exec boil.Executor) (*Blob, error) {
	o := &Blob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for blobs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Blob records from the query using the global executor.
func (q blobQuery) AllG() (BlobSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Blob records from the query.
func (q blobQuery) All(exec boil.Executor) (BlobSlice, error) {
	var o []*Blob

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Blob slice")
	}

	if len(blobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Blob records in the query, and panics on error.
func (q blobQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Blob records in the query.
func (q blobQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count blobs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q blobQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q blobQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if blobs exists")
	}

	return count > 0, nil
}

// AvatarBlobFriends retrieves all the friend's Friends with an executor via avatar_blob_id column.
func (o *Blob) AvatarBlobFriends(mods ...qm.QueryMod) friendQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"friends\".\"avatar_blob_id\"=?", o.ID),
	)

	query := Friends(queryMods...)
	queries.SetFrom(query.Query, "\"friends\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"friends\".*"})
	}

	return query
}

// LoadAvatarBlobFriends allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blobL) LoadAvatarBlobFriends(e boil.Executor, singular bool, maybeBlob interface{}, mods queries.Applicator) error {
	var slice []*Blob
	var object *Blob

	if singular {
		object = maybeBlob.(*Blob)
	} else {
		slice = *maybeBlob.(*[]*Blob)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`friends`), qm.WhereIn(`friends.avatar_blob_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load friends")
	}

	var resultSlice []*Friend
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice friends")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on friends")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for friends")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AvatarBlobFriends = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &friendR{}
			}
			foreign.R.AvatarBlob = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AvatarBlobID) {
				local.R.AvatarBlobFriends = append(local.R.AvatarBlobFriends, foreign)
				if foreign.R == nil {
					foreign.R = &friendR{}
				}
				foreign.R.AvatarBlob = local
				break
			}
		}
	}

	return nil
}

// AddAvatarBlobFriendsG adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.AvatarBlobFriends.
// Sets related.R.AvatarBlob appropriately.
// Uses the global database handle.
func (o *Blob) AddAvatarBlobFriendsG(insert bool, related ...*Friend) error {
	return o.AddAvatarBlobFriends(boil.GetDB(), insert, related...)
}

// AddAvatarBlobFriends adds the given related objects to the existing relationships
// of the blob, optionally inserting them as new records.
// Appends related to o.R.AvatarBlobFriends.
// Sets related.R.AvatarBlob appropriately.
func (o *Blob) AddAvatarBlobFriends(exec boil.Executor, insert bool, related ...*Friend) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AvatarBlobID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"friends\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"avatar_blob_id"}),
				strmangle.WhereClause("\"", "\"", 0, friendPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AvatarBlobID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blobR{
			AvatarBlobFriends: related,
		}
	} else {
		o.R.AvatarBlobFriends = append(o.R.AvatarBlobFriends, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &friendR{
				AvatarBlob: o,
			}
		} else {
			rel.R.AvatarBlob = o
		}
	}
	return nil
}

// SetAvatarBlobFriendsG removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AvatarBlob's AvatarBlobFriends accordingly.
// Replaces o.R.AvatarBlobFriends with related.
// Sets related.R.AvatarBlob's AvatarBlobFriends accordingly.
// Uses the global database handle.
func (o *Blob) SetAvatarBlobFriendsG(insert bool, related ...*Friend) error {
	return o.SetAvatarBlobFriends(boil.GetDB(), insert, related...)
}

// SetAvatarBlobFriends removes all previously related items of the
// blob replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AvatarBlob's AvatarBlobFriends accordingly.
// Replaces o.R.AvatarBlobFriends with related.
// Sets related.R.AvatarBlob's AvatarBlobFriends accordingly.
func (o *Blob) SetAvatarBlobFriends(exec boil.Executor, insert bool, related ...*Friend) error {
	query := "update \"friends\" set \"avatar_blob_id\" = null where \"avatar_blob_id\" = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AvatarBlobFriends {
			queries.SetScanner(&rel.AvatarBlobID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AvatarBlob = nil
		}

		o.R.AvatarBlobFriends = nil
	}
	return o.AddAvatarBlobFriends(exec, insert, related...)
}

// RemoveAvatarBlobFriendsG relationships from objects passed in.
// Removes related items from R.AvatarBlobFriends (uses pointer comparison, removal does not keep order)
// Sets related.R.AvatarBlob.
// Uses the global database handle.
func (o *Blob) RemoveAvatarBlobFriendsG(related ...*Friend) error {
	return o.RemoveAvatarBlobFriends(boil.GetDB(), related...)
}

// RemoveAvatarBlobFriends relationships from objects passed in.
// Removes related items from R.AvatarBlobFriends (uses pointer comparison, removal does not keep order)
// Sets related.R.AvatarBlob.
func (o *Blob) RemoveAvatarBlobFriends(exec boil.Executor, related ...*Friend) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AvatarBlobID, nil)
		if rel.R != nil {
			rel.R.AvatarBlob = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("avatar_blob_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AvatarBlobFriends {
			if rel != ri {
				continue
			}

			ln := len(o.R.AvatarBlobFriends)
			if ln > 1 && i < ln-1 {
				o.R.AvatarBlobFriends[i] = o.R.AvatarBlobFriends[ln-1]
			}
			o.R.AvatarBlobFriends = o.R.AvatarBlobFriends[:ln-1]
			break
		}
	}

	return nil
}

// Blobs retrieves all the records using an executor.
func Blobs(mods ...qm.QueryMod) blobQuery {
	mods = append(mods, qm.From("\"blobs\""))
	return blobQuery{NewQuery(mods...)}
}

// FindBlobG retrieves a single record by ID.
func FindBlobG(iD null.Int64, selectCols ...string) (*Blob, error) {
	return FindBlob(boil.GetDB(), iD, selectCols...)
}

// FindBlob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlob(exec boil.Executor, iD null.Int64, selectCols ...string) (*Blob, error) {
	blobObj := &Blob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blobs\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blobObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from blobs")
	}

	return blobObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Blob) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Blob) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no blobs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blobInsertCacheMut.RLock()
	cache, cached := blobInsertCache[key]
	blobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blobAllColumns,
			blobColumnsWithDefault,
			blobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blobType, blobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blobType, blobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blobs\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"blobs\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, blobPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into blobs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for blobs")
	}

CacheNoHooks:
	if !cached {
		blobInsertCacheMut.Lock()
		blobInsertCache[key] = cache
		blobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Blob record using the global executor.
// See Update for more documentation.
func (o *Blob) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Blob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Blob) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blobUpdateCacheMut.RLock()
	cache, cached := blobUpdateCache[key]
	blobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blobAllColumns,
			blobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update blobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, blobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blobType, blobMapping, append(wl, blobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update blobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for blobs")
	}

	if !cached {
		blobUpdateCacheMut.Lock()
		blobUpdateCache[key] = cache
		blobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q blobQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q blobQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for blobs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BlobSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlobSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blobPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in blob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all blob")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Blob record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Blob) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Blob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Blob) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Blob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blobPrimaryKeyMapping)
	sql := "DELETE FROM \"blobs\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for blobs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blobQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no blobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from blobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for blobs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BlobSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlobSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blobPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from blob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for blobs")
	}

	if len(blobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Blob) ReloadG() error {
	if o == nil {
		return errors.New("db: no Blob provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Blob) Reload(exec boil.Executor) error {
	ret, err := FindBlob(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlobSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty BlobSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlobSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blobs\".* FROM \"blobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in BlobSlice")
	}

	*o = slice

	return nil
}

// BlobExistsG checks if the Blob row exists.
func BlobExistsG(iD null.Int64) (bool, error) {
	return BlobExists(boil.GetDB(), iD)
}

// BlobExists checks if the Blob row exists.
func BlobExists(exec boil.Executor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blobs\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if blobs exists")
	}

	return exists, nil
}

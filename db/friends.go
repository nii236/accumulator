// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Friend is an object representing the database table.
type Friend struct {
	ID                            null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	IntegrationID                 int64      `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	IsTeacher                     bool       `boil:"is_teacher" json:"is_teacher" toml:"is_teacher" yaml:"is_teacher"`
	VrchatID                      string     `boil:"vrchat_id" json:"vrchat_id" toml:"vrchat_id" yaml:"vrchat_id"`
	VrchatUsername                string     `boil:"vrchat_username" json:"vrchat_username" toml:"vrchat_username" yaml:"vrchat_username"`
	VrchatDisplayName             string     `boil:"vrchat_display_name" json:"vrchat_display_name" toml:"vrchat_display_name" yaml:"vrchat_display_name"`
	VrchatAvatarImageURL          string     `boil:"vrchat_avatar_image_url" json:"vrchat_avatar_image_url" toml:"vrchat_avatar_image_url" yaml:"vrchat_avatar_image_url"`
	VrchatAvatarThumbnailImageURL string     `boil:"vrchat_avatar_thumbnail_image_url" json:"vrchat_avatar_thumbnail_image_url" toml:"vrchat_avatar_thumbnail_image_url" yaml:"vrchat_avatar_thumbnail_image_url"`
	VrchatLocation                string     `boil:"vrchat_location" json:"vrchat_location" toml:"vrchat_location" yaml:"vrchat_location"`

	R *friendR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L friendL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FriendColumns = struct {
	ID                            string
	IntegrationID                 string
	IsTeacher                     string
	VrchatID                      string
	VrchatUsername                string
	VrchatDisplayName             string
	VrchatAvatarImageURL          string
	VrchatAvatarThumbnailImageURL string
	VrchatLocation                string
}{
	ID:                            "id",
	IntegrationID:                 "integration_id",
	IsTeacher:                     "is_teacher",
	VrchatID:                      "vrchat_id",
	VrchatUsername:                "vrchat_username",
	VrchatDisplayName:             "vrchat_display_name",
	VrchatAvatarImageURL:          "vrchat_avatar_image_url",
	VrchatAvatarThumbnailImageURL: "vrchat_avatar_thumbnail_image_url",
	VrchatLocation:                "vrchat_location",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var FriendWhere = struct {
	ID                            whereHelpernull_Int64
	IntegrationID                 whereHelperint64
	IsTeacher                     whereHelperbool
	VrchatID                      whereHelperstring
	VrchatUsername                whereHelperstring
	VrchatDisplayName             whereHelperstring
	VrchatAvatarImageURL          whereHelperstring
	VrchatAvatarThumbnailImageURL whereHelperstring
	VrchatLocation                whereHelperstring
}{
	ID:                            whereHelpernull_Int64{field: "\"friends\".\"id\""},
	IntegrationID:                 whereHelperint64{field: "\"friends\".\"integration_id\""},
	IsTeacher:                     whereHelperbool{field: "\"friends\".\"is_teacher\""},
	VrchatID:                      whereHelperstring{field: "\"friends\".\"vrchat_id\""},
	VrchatUsername:                whereHelperstring{field: "\"friends\".\"vrchat_username\""},
	VrchatDisplayName:             whereHelperstring{field: "\"friends\".\"vrchat_display_name\""},
	VrchatAvatarImageURL:          whereHelperstring{field: "\"friends\".\"vrchat_avatar_image_url\""},
	VrchatAvatarThumbnailImageURL: whereHelperstring{field: "\"friends\".\"vrchat_avatar_thumbnail_image_url\""},
	VrchatLocation:                whereHelperstring{field: "\"friends\".\"vrchat_location\""},
}

// FriendRels is where relationship names are stored.
var FriendRels = struct {
	Integration        string
	Attendance         string
	TeacherAttendances string
}{
	Integration:        "Integration",
	Attendance:         "Attendance",
	TeacherAttendances: "TeacherAttendances",
}

// friendR is where relationships are stored.
type friendR struct {
	Integration        *Integration
	Attendance         *Attendance
	TeacherAttendances AttendanceSlice
}

// NewStruct creates a new relationship struct
func (*friendR) NewStruct() *friendR {
	return &friendR{}
}

// friendL is where Load methods for each relationship are stored.
type friendL struct{}

var (
	friendAllColumns            = []string{"id", "integration_id", "is_teacher", "vrchat_id", "vrchat_username", "vrchat_display_name", "vrchat_avatar_image_url", "vrchat_avatar_thumbnail_image_url", "vrchat_location"}
	friendColumnsWithoutDefault = []string{"integration_id", "vrchat_id", "vrchat_username", "vrchat_display_name", "vrchat_avatar_image_url", "vrchat_avatar_thumbnail_image_url", "vrchat_location"}
	friendColumnsWithDefault    = []string{"id", "is_teacher"}
	friendPrimaryKeyColumns     = []string{"id"}
)

type (
	// FriendSlice is an alias for a slice of pointers to Friend.
	// This should generally be used opposed to []Friend.
	FriendSlice []*Friend
	// FriendHook is the signature for custom Friend hook methods
	FriendHook func(boil.Executor, *Friend) error

	friendQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	friendType                 = reflect.TypeOf(&Friend{})
	friendMapping              = queries.MakeStructMapping(friendType)
	friendPrimaryKeyMapping, _ = queries.BindMapping(friendType, friendMapping, friendPrimaryKeyColumns)
	friendInsertCacheMut       sync.RWMutex
	friendInsertCache          = make(map[string]insertCache)
	friendUpdateCacheMut       sync.RWMutex
	friendUpdateCache          = make(map[string]updateCache)
	friendUpsertCacheMut       sync.RWMutex
	friendUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var friendBeforeInsertHooks []FriendHook
var friendBeforeUpdateHooks []FriendHook
var friendBeforeDeleteHooks []FriendHook
var friendBeforeUpsertHooks []FriendHook

var friendAfterInsertHooks []FriendHook
var friendAfterSelectHooks []FriendHook
var friendAfterUpdateHooks []FriendHook
var friendAfterDeleteHooks []FriendHook
var friendAfterUpsertHooks []FriendHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Friend) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Friend) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range friendBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Friend) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range friendBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Friend) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Friend) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Friend) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range friendAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Friend) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range friendAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Friend) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range friendAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Friend) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range friendAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFriendHook registers your hook function for all future operations.
func AddFriendHook(hookPoint boil.HookPoint, friendHook FriendHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		friendBeforeInsertHooks = append(friendBeforeInsertHooks, friendHook)
	case boil.BeforeUpdateHook:
		friendBeforeUpdateHooks = append(friendBeforeUpdateHooks, friendHook)
	case boil.BeforeDeleteHook:
		friendBeforeDeleteHooks = append(friendBeforeDeleteHooks, friendHook)
	case boil.BeforeUpsertHook:
		friendBeforeUpsertHooks = append(friendBeforeUpsertHooks, friendHook)
	case boil.AfterInsertHook:
		friendAfterInsertHooks = append(friendAfterInsertHooks, friendHook)
	case boil.AfterSelectHook:
		friendAfterSelectHooks = append(friendAfterSelectHooks, friendHook)
	case boil.AfterUpdateHook:
		friendAfterUpdateHooks = append(friendAfterUpdateHooks, friendHook)
	case boil.AfterDeleteHook:
		friendAfterDeleteHooks = append(friendAfterDeleteHooks, friendHook)
	case boil.AfterUpsertHook:
		friendAfterUpsertHooks = append(friendAfterUpsertHooks, friendHook)
	}
}

// OneG returns a single friend record from the query using the global executor.
func (q friendQuery) OneG() (*Friend, error) {
	return q.One(boil.GetDB())
}

// One returns a single friend record from the query.
func (q friendQuery) One(exec boil.Executor) (*Friend, error) {
	o := &Friend{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for friends")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Friend records from the query using the global executor.
func (q friendQuery) AllG() (FriendSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Friend records from the query.
func (q friendQuery) All(exec boil.Executor) (FriendSlice, error) {
	var o []*Friend

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Friend slice")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Friend records in the query, and panics on error.
func (q friendQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Friend records in the query.
func (q friendQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count friends rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q friendQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q friendQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if friends exists")
	}

	return count > 0, nil
}

// Integration pointed to by the foreign key.
func (o *Friend) Integration(mods ...qm.QueryMod) integrationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IntegrationID),
	}

	queryMods = append(queryMods, mods...)

	query := Integrations(queryMods...)
	queries.SetFrom(query.Query, "\"integrations\"")

	return query
}

// Attendance pointed to by the foreign key.
func (o *Friend) Attendance(mods ...qm.QueryMod) attendanceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"friend_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Attendances(queryMods...)
	queries.SetFrom(query.Query, "\"attendance\"")

	return query
}

// TeacherAttendances retrieves all the attendance's Attendances with an executor via teacher_id column.
func (o *Friend) TeacherAttendances(mods ...qm.QueryMod) attendanceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attendance\".\"teacher_id\"=?", o.ID),
	)

	query := Attendances(queryMods...)
	queries.SetFrom(query.Query, "\"attendance\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"attendance\".*"})
	}

	return query
}

// LoadIntegration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendL) LoadIntegration(e boil.Executor, singular bool, maybeFriend interface{}, mods queries.Applicator) error {
	var slice []*Friend
	var object *Friend

	if singular {
		object = maybeFriend.(*Friend)
	} else {
		slice = *maybeFriend.(*[]*Friend)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &friendR{}
		}
		if !queries.IsNil(object.IntegrationID) {
			args = append(args, object.IntegrationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IntegrationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IntegrationID) {
				args = append(args, obj.IntegrationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`integrations`), qm.WhereIn(`integrations.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Integration")
	}

	var resultSlice []*Integration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Integration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for integrations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for integrations")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Integration = foreign
		if foreign.R == nil {
			foreign.R = &integrationR{}
		}
		foreign.R.Friend = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IntegrationID, foreign.ID) {
				local.R.Integration = foreign
				if foreign.R == nil {
					foreign.R = &integrationR{}
				}
				foreign.R.Friend = local
				break
			}
		}
	}

	return nil
}

// LoadAttendance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (friendL) LoadAttendance(e boil.Executor, singular bool, maybeFriend interface{}, mods queries.Applicator) error {
	var slice []*Friend
	var object *Friend

	if singular {
		object = maybeFriend.(*Friend)
	} else {
		slice = *maybeFriend.(*[]*Friend)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &friendR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`attendance`), qm.WhereIn(`attendance.friend_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attendance")
	}

	var resultSlice []*Attendance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attendance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attendance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attendance")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Attendance = foreign
		if foreign.R == nil {
			foreign.R = &attendanceR{}
		}
		foreign.R.Friend = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.FriendID) {
				local.R.Attendance = foreign
				if foreign.R == nil {
					foreign.R = &attendanceR{}
				}
				foreign.R.Friend = local
				break
			}
		}
	}

	return nil
}

// LoadTeacherAttendances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (friendL) LoadTeacherAttendances(e boil.Executor, singular bool, maybeFriend interface{}, mods queries.Applicator) error {
	var slice []*Friend
	var object *Friend

	if singular {
		object = maybeFriend.(*Friend)
	} else {
		slice = *maybeFriend.(*[]*Friend)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &friendR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`attendance`), qm.WhereIn(`attendance.teacher_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attendance")
	}

	var resultSlice []*Attendance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attendance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attendance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attendance")
	}

	if len(attendanceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TeacherAttendances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attendanceR{}
			}
			foreign.R.Teacher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TeacherID) {
				local.R.TeacherAttendances = append(local.R.TeacherAttendances, foreign)
				if foreign.R == nil {
					foreign.R = &attendanceR{}
				}
				foreign.R.Teacher = local
				break
			}
		}
	}

	return nil
}

// SetIntegrationG of the friend to the related item.
// Sets o.R.Integration to related.
// Adds o to related.R.Friend.
// Uses the global database handle.
func (o *Friend) SetIntegrationG(insert bool, related *Integration) error {
	return o.SetIntegration(boil.GetDB(), insert, related)
}

// SetIntegration of the friend to the related item.
// Sets o.R.Integration to related.
// Adds o to related.R.Friend.
func (o *Friend) SetIntegration(exec boil.Executor, insert bool, related *Integration) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friends\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"integration_id"}),
		strmangle.WhereClause("\"", "\"", 0, friendPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IntegrationID, related.ID)
	if o.R == nil {
		o.R = &friendR{
			Integration: related,
		}
	} else {
		o.R.Integration = related
	}

	if related.R == nil {
		related.R = &integrationR{
			Friend: o,
		}
	} else {
		related.R.Friend = o
	}

	return nil
}

// SetAttendanceG of the friend to the related item.
// Sets o.R.Attendance to related.
// Adds o to related.R.Friend.
// Uses the global database handle.
func (o *Friend) SetAttendanceG(insert bool, related *Attendance) error {
	return o.SetAttendance(boil.GetDB(), insert, related)
}

// SetAttendance of the friend to the related item.
// Sets o.R.Attendance to related.
// Adds o to related.R.Friend.
func (o *Friend) SetAttendance(exec boil.Executor, insert bool, related *Attendance) error {
	var err error

	if insert {
		queries.Assign(&related.FriendID, o.ID)

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"attendance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"friend_id"}),
			strmangle.WhereClause("\"", "\"", 0, attendancePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Timestamp, related.IntegrationID, related.FriendID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.FriendID, o.ID)
	}

	if o.R == nil {
		o.R = &friendR{
			Attendance: related,
		}
	} else {
		o.R.Attendance = related
	}

	if related.R == nil {
		related.R = &attendanceR{
			Friend: o,
		}
	} else {
		related.R.Friend = o
	}
	return nil
}

// RemoveAttendanceG relationship.
// Sets o.R.Attendance to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Friend) RemoveAttendanceG(related *Attendance) error {
	return o.RemoveAttendance(boil.GetDB(), related)
}

// RemoveAttendance relationship.
// Sets o.R.Attendance to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Friend) RemoveAttendance(exec boil.Executor, related *Attendance) error {
	var err error

	queries.SetScanner(&related.FriendID, nil)
	if _, err = related.Update(exec, boil.Whitelist("friend_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Attendance = nil
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Friend = nil
	return nil
}

// AddTeacherAttendancesG adds the given related objects to the existing relationships
// of the friend, optionally inserting them as new records.
// Appends related to o.R.TeacherAttendances.
// Sets related.R.Teacher appropriately.
// Uses the global database handle.
func (o *Friend) AddTeacherAttendancesG(insert bool, related ...*Attendance) error {
	return o.AddTeacherAttendances(boil.GetDB(), insert, related...)
}

// AddTeacherAttendances adds the given related objects to the existing relationships
// of the friend, optionally inserting them as new records.
// Appends related to o.R.TeacherAttendances.
// Sets related.R.Teacher appropriately.
func (o *Friend) AddTeacherAttendances(exec boil.Executor, insert bool, related ...*Attendance) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TeacherID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attendance\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"teacher_id"}),
				strmangle.WhereClause("\"", "\"", 0, attendancePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Timestamp, rel.IntegrationID, rel.FriendID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TeacherID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &friendR{
			TeacherAttendances: related,
		}
	} else {
		o.R.TeacherAttendances = append(o.R.TeacherAttendances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attendanceR{
				Teacher: o,
			}
		} else {
			rel.R.Teacher = o
		}
	}
	return nil
}

// SetTeacherAttendancesG removes all previously related items of the
// friend replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Teacher's TeacherAttendances accordingly.
// Replaces o.R.TeacherAttendances with related.
// Sets related.R.Teacher's TeacherAttendances accordingly.
// Uses the global database handle.
func (o *Friend) SetTeacherAttendancesG(insert bool, related ...*Attendance) error {
	return o.SetTeacherAttendances(boil.GetDB(), insert, related...)
}

// SetTeacherAttendances removes all previously related items of the
// friend replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Teacher's TeacherAttendances accordingly.
// Replaces o.R.TeacherAttendances with related.
// Sets related.R.Teacher's TeacherAttendances accordingly.
func (o *Friend) SetTeacherAttendances(exec boil.Executor, insert bool, related ...*Attendance) error {
	query := "update \"attendance\" set \"teacher_id\" = null where \"teacher_id\" = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TeacherAttendances {
			queries.SetScanner(&rel.TeacherID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Teacher = nil
		}

		o.R.TeacherAttendances = nil
	}
	return o.AddTeacherAttendances(exec, insert, related...)
}

// RemoveTeacherAttendancesG relationships from objects passed in.
// Removes related items from R.TeacherAttendances (uses pointer comparison, removal does not keep order)
// Sets related.R.Teacher.
// Uses the global database handle.
func (o *Friend) RemoveTeacherAttendancesG(related ...*Attendance) error {
	return o.RemoveTeacherAttendances(boil.GetDB(), related...)
}

// RemoveTeacherAttendances relationships from objects passed in.
// Removes related items from R.TeacherAttendances (uses pointer comparison, removal does not keep order)
// Sets related.R.Teacher.
func (o *Friend) RemoveTeacherAttendances(exec boil.Executor, related ...*Attendance) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TeacherID, nil)
		if rel.R != nil {
			rel.R.Teacher = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("teacher_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TeacherAttendances {
			if rel != ri {
				continue
			}

			ln := len(o.R.TeacherAttendances)
			if ln > 1 && i < ln-1 {
				o.R.TeacherAttendances[i] = o.R.TeacherAttendances[ln-1]
			}
			o.R.TeacherAttendances = o.R.TeacherAttendances[:ln-1]
			break
		}
	}

	return nil
}

// Friends retrieves all the records using an executor.
func Friends(mods ...qm.QueryMod) friendQuery {
	mods = append(mods, qm.From("\"friends\""))
	return friendQuery{NewQuery(mods...)}
}

// FindFriendG retrieves a single record by ID.
func FindFriendG(iD null.Int64, selectCols ...string) (*Friend, error) {
	return FindFriend(boil.GetDB(), iD, selectCols...)
}

// FindFriend retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFriend(exec boil.Executor, iD null.Int64, selectCols ...string) (*Friend, error) {
	friendObj := &Friend{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"friends\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, friendObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from friends")
	}

	return friendObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Friend) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Friend) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no friends provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	friendInsertCacheMut.RLock()
	cache, cached := friendInsertCache[key]
	friendInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			friendAllColumns,
			friendColumnsWithDefault,
			friendColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(friendType, friendMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(friendType, friendMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"friends\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"friends\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"friends\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, friendPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into friends")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for friends")
	}

CacheNoHooks:
	if !cached {
		friendInsertCacheMut.Lock()
		friendInsertCache[key] = cache
		friendInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Friend record using the global executor.
// See Update for more documentation.
func (o *Friend) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Friend.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Friend) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	friendUpdateCacheMut.RLock()
	cache, cached := friendUpdateCache[key]
	friendUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			friendAllColumns,
			friendPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update friends, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"friends\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, friendPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(friendType, friendMapping, append(wl, friendPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update friends row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for friends")
	}

	if !cached {
		friendUpdateCacheMut.Lock()
		friendUpdateCache[key] = cache
		friendUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q friendQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q friendQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for friends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for friends")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FriendSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FriendSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"friends\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, friendPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in friend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all friend")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Friend record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Friend) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Friend record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Friend) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Friend provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), friendPrimaryKeyMapping)
	sql := "DELETE FROM \"friends\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from friends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for friends")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q friendQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no friendQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from friends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for friends")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FriendSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FriendSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(friendBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"friends\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, friendPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from friend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for friends")
	}

	if len(friendAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Friend) ReloadG() error {
	if o == nil {
		return errors.New("db: no Friend provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Friend) Reload(exec boil.Executor) error {
	ret, err := FindFriend(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty FriendSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FriendSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"friends\".* FROM \"friends\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, friendPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in FriendSlice")
	}

	*o = slice

	return nil
}

// FriendExistsG checks if the Friend row exists.
func FriendExistsG(iD null.Int64) (bool, error) {
	return FriendExists(boil.GetDB(), iD)
}

// FriendExists checks if the Friend row exists.
func FriendExists(exec boil.Executor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"friends\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if friends exists")
	}

	return exists, nil
}

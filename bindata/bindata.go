// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20191225220909_initial_migration.down.sql (0)
// migrations/20191225220909_initial_migration.up.sql (2.354kB)

package bindata

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20191225220909_initial_migrationDownSql = []byte("")

func _20191225220909_initial_migrationDownSqlBytes() ([]byte, error) {
	return __20191225220909_initial_migrationDownSql, nil
}

func _20191225220909_initial_migrationDownSql() (*asset, error) {
	bytes, err := _20191225220909_initial_migrationDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20191225220909_initial_migration.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1577321316, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __20191225220909_initial_migrationUpSql = []byte(`CREATE TABLE blobs (
    id INTEGER PRIMARY KEY,
    file_name VARCHAR UNIQUE NOT NULL,
    mime_type VARCHAR NOT NULL,
    file_size_bytes INT NOT NULL,
    EXTENSION VARCHAR NOT NULL,
    file BLOB NOT NULL,
    views INTEGER DEFAULT 0,

    archived BOOLEAN NOT NULL DEFAULT 0,
    archived_at DATETIME,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users (
    id INTEGER PRIMARY KEY,
    email VARCHAR NOT NULL,
    password_hash VARCHAR NOT NULL,
    role VARCHAR NOT NULL DEFAULT "user",
    archived BOOLEAN NOT NULL DEFAULT 0,
    archived_at DATETIME,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE integrations (
    id INTEGER PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id),
    username VARCHAR NOT NULL UNIQUE,
    api_key VARCHAR NOT NULL,
    auth_token VARCHAR NOT NULL,
    
    archived BOOLEAN NOT NULL DEFAULT 0,
    archived_at DATETIME,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE friends (
    id INTEGER PRIMARY KEY,
    integration_id INT NOT NULL REFERENCES integrations(id),
    is_teacher BOOLEAN NOT NULL DEFAULT 0,
    vrchat_id VARCHAR UNIQUE NOT NULL,
    vrchat_username VARCHAR NOT NULL,
    vrchat_display_name VARCHAR NOT NULL,
    vrchat_avatar_image_url VARCHAR NOT NULL,
    vrchat_avatar_thumbnail_image_url VARCHAR NOT NULL,
    vrchat_location VARCHAR NOT NULL,
    avatar_blob_id INT REFERENCES blobs(id),

    archived BOOLEAN NOT NULL DEFAULT 0,
    archived_at DATETIME,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,

    UNIQUE (integration_id, vrchat_id)
);

CREATE TABLE attendance (
    timestamp INT NOT NULL,
    integration_id INT NULL NULL REFERENCES integrations(id),
    friend_id INT REFERENCES friends(id),
    teacher_id INT REFERENCES friends(id),
    location VARCHAR NOT NULL,
    
    archived BOOLEAN NOT NULL DEFAULT 0,
    archived_at DATETIME,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (timestamp, friend_id, integration_id)
);
`)

func _20191225220909_initial_migrationUpSqlBytes() ([]byte, error) {
	return __20191225220909_initial_migrationUpSql, nil
}

func _20191225220909_initial_migrationUpSql() (*asset, error) {
	bytes, err := _20191225220909_initial_migrationUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20191225220909_initial_migration.up.sql", size: 2354, mode: os.FileMode(0644), modTime: time.Unix(1577494501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0xc6, 0xa6, 0xaa, 0x98, 0xb6, 0x5f, 0xdb, 0x6e, 0xf0, 0x5b, 0x8b, 0x44, 0x95, 0xa1, 0x2f, 0xf5, 0xa0, 0x82, 0xe3, 0x90, 0xcb, 0x76, 0x7d, 0xdb, 0xc3, 0x88, 0x75, 0xb8, 0xe3, 0xd6, 0xc4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20191225220909_initial_migration.down.sql": _20191225220909_initial_migrationDownSql,
	"20191225220909_initial_migration.up.sql":   _20191225220909_initial_migrationUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20191225220909_initial_migration.down.sql": &bintree{_20191225220909_initial_migrationDownSql, map[string]*bintree{}},
	"20191225220909_initial_migration.up.sql":   &bintree{_20191225220909_initial_migrationUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
